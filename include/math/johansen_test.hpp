#pragma once

#include <Eigen/Dense>
#include "definitions.hpp"

class JohansenTest {

public:
    JohansenTest(Eigen::MatrixXd& data, i32 p, i8 detOrder);
    Eigen::VectorXd traceStat();
    Eigen::VectorXd maxEigenStat();
    Eigen::VectorXd eigenvalues();
    Eigen::MatrixXd cointegrationVectors() { return cointegrationVecs_; };

    static constexpr std::array<std::array<f64, 3>, 12> traceStatCritValsP0 = {{ {{2.9762, 4.1296, 6.9406}}, {{10.4741, 12.3212, 16.3640}}, {{21.7781, 24.2761, 29.5147}}, {{37.0339, 40.1749, 46.5716}}, {{56.2839, 60.0627, 67.6367}}, {{79.5329, 83.9383, 92.7136}}, {{106.7351, 111.7797, 121.7375}}, {{137.9954, 143.6691, 154.7977}}, {{173.2292, 179.5199, 191.8122}}, {{212.4721, 219.4051, 232.8291}}, {{255.6732, 263.2603, 277.9962}}, {{302.9054, 311.1288, 326.9716}} }};
    static constexpr std::array<std::array<f64, 3>, 12> traceStatCritValsP1 = {{ {{2.7055, 3.8415, 6.6349}}, {{13.4294, 15.4943, 19.9349}}, {{27.0669, 29.7961, 35.4628}}, {{44.4929, 47.8545, 54.6815}}, {{65.8202, 69.8189, 77.8202}}, {{91.1090, 95.7542, 104.9637}}, {{120.3673, 125.6185, 135.9825}}, {{153.6341, 159.5290, 171.0905}}, {{190.8714, 197.3772, 210.0366}}, {{232.1030, 239.2468, 253.2526}}, {{277.3740, 285.1402, 300.2821}}, {{326.5354, 334.9795, 351.2150}} }};
    static constexpr std::array<std::array<f64, 3>, 12> traceStatCritValsP2 = {{ {{2.7055, 3.8415, 6.6349}}, {{16.1619, 18.3985, 23.1485}}, {{32.0645, 35.0116, 41.0815}}, {{51.6492, 55.2459, 62.5202}}, {{75.1027, 79.3422, 87.7748}}, {{102.4674, 107.3429, 116.9829}}, {{133.7852, 139.2780, 150.0778}}, {{169.0618, 175.1584, 187.1891}}, {{208.3582, 215.1268, 228.2226}}, {{251.6293, 259.0267, 273.3838}}, {{298.8836, 306.8988, 322.4264}}, {{350.1125, 358.7190, 375.3203}} }};

    static constexpr std::array<std::array<f64, 3>, 12> maxEigenStatCritValP0 = {{ {{2.9762, 4.1296, 6.9406}}, {{9.4748, 11.2246, 15.0923}}, {{15.7175, 17.7961, 22.2519}}, {{21.8370, 24.1592, 29.0609}}, {{27.9160, 30.4428, 35.7359}}, {{33.9271, 36.6301, 42.2333}}, {{39.9085, 42.7679, 48.6606}}, {{45.8930, 48.8795, 55.0335}}, {{51.8528, 54.9629, 61.3449}}, {{57.7954, 61.0404, 67.6415}}, {{63.7248, 67.0756, 73.8856}}, {{69.6513, 73.0946, 80.0937}} }};
    static constexpr std::array<std::array<f64, 3>, 12> maxEigenStatCritValP1 = {{ {{2.7055, 3.8415, 6.6349}}, {{12.2971, 14.2639, 18.5200}}, {{18.8928, 21.1314, 25.8650}}, {{25.1236, 27.5858, 32.7172}}, {{31.2379, 33.8777, 39.3693}}, {{37.2786, 40.0763, 45.8662}}, {{43.2947, 46.2299, 52.3069}}, {{49.2855, 52.3622, 58.6634}}, {{55.2412, 58.4332, 64.9960}}, {{61.2041, 64.5040, 71.2525}}, {{67.1307, 70.5392, 77.4877}}, {{73.0563, 76.5734, 83.7105}} }};
    static constexpr std::array<std::array<f64, 3>, 12> maxEigenStatCritValP2 = {{ {{2.7055, 3.8415, 6.6349}}, {{15.0006, 17.1481, 21.7465}}, {{21.8731, 24.2522, 29.2631}}, {{28.2398, 30.8151, 36.1930}}, {{34.4202, 37.1646, 42.8612}}, {{40.5244, 43.4183, 49.4095}}, {{46.5583, 49.5875, 55.8171}}, {{52.5858, 55.7302, 62.1741}}, {{58.5316, 61.8051, 68.5030}}, {{64.5292, 67.9040, 74.7434}}, {{70.4630, 73.9355, 81.0678}}, {{76.4081, 79.9878, 87.2395}} }};

private:
    void buildRegressionMatrices();
    void regress();
    void buildCovarianceMatrices();
    void solveGenerEigenvalProb();

    Eigen::MatrixXd data_;
    Eigen::MatrixXd Z_;
    Eigen::MatrixXd deltaX_;
    Eigen::MatrixXd laggedX_;

    // residual matrices
    Eigen::MatrixXd R_;
    Eigen::MatrixXd S_;

    // covariance matrices
    Eigen::MatrixXd S_00;
    Eigen::MatrixXd S_11;
    Eigen::MatrixXd S_01;
    Eigen::MatrixXd S_10;

    // eigenvalues
    Eigen::VectorXd lambda_;
    Eigen::MatrixXd cointegrationVecs_;

    i32 p_ = 0;
    i8  detOrder_ = 0;


};
